package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/developertom01/library-server/app/graphql/dataloader"
	"github.com/developertom01/library-server/app/graphql/exceptions"
	"github.com/developertom01/library-server/app/graphql/model"
	"github.com/developertom01/library-server/app/graphql/resources"
	"github.com/developertom01/library-server/generated"
	"github.com/developertom01/library-server/utils"
)

// User is the resolver for the user field.
func (r *folderResolver) User(ctx context.Context, obj *model.Folder) (*model.User, error) {
	dl := dataloader.ExtractLoaderFromContext(ctx)
	user, err := dl.LoadUserById(*obj.UserID)
	if err != nil {
		return nil, err
	}

	return resources.NewUserResource(*user), nil
}

// Children is the resolver for the children field.
func (r *folderResolver) Children(ctx context.Context, obj *model.Folder, page *int, pageSize *int, orderByField *string, orderBy *model.Order) (*model.PaginatedFolderItems, error) {
	uuid, err := utils.ParseScalerUuidToNativeUuid(obj.UUID)
	if err != nil {
		return nil, err
	}

	limit, offset := utils.CalculatePaginationLimitAndOffset(*page, *pageSize)
	children, count, err := r.Db.FindPaginatedFolderContentReferencingParentId(uuid, uint(limit), uint(offset), orderByField, orderBy)
	if err != nil {
		return nil, err
	}

	return resources.PaginatedFolderItemResource(children, count, *pageSize, *page+1, *orderByField, *orderBy), nil
}

// Folder is the resolver for the folder field.
func (r *folderItemResolver) Folder(ctx context.Context, obj *model.FolderItem) (*model.Folder, error) {
	folder, err := r.Db.FindFolderReferencingFolderItemId(uint(obj.ID))
	if err != nil {
		return nil, err
	}

	return resources.NewFolderResource(folder), nil
}

// File is the resolver for the file field.
func (r *folderItemResolver) File(ctx context.Context, obj *model.FolderItem) (*model.File, error) {
	file, err := r.Db.FindFileReferencingFolderItemId(uint(obj.ID))
	if err != nil {
		return nil, err
	}

	return resources.NewFileResource(file), nil
}

// Parent is the resolver for the parent field.
func (r *folderItemResolver) Parent(ctx context.Context, obj *model.FolderItem) (*model.Folder, error) {
	parent, err := r.Db.FindParentFolderReferencingFolderItemId(uint(obj.ID))
	if err != nil {
		return nil, err
	}

	return resources.NewFolderResource(parent), nil
}

// CreateFolder is the resolver for the createFolder field.
func (r *mutationResolver) CreateFolder(ctx context.Context, input *model.CreateFolderInput) (model.CreateFolderResponse, error) {
	user := ctx.Value("user").(*utils.JWTClaim)
	if user == nil {
		return exceptions.NewUnAuthorizeError("UnAuthorized"), nil
	}

	folder, err := r.Db.CreateFolder(input.Name, user.ID, *input.ParentUUID)
	if err != nil {
		return nil, err
	}

	return resources.NewFolderResource(folder), nil
}

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, input *model.CreateFileInput) (model.CreateFileResponse, error) {
	user := ctx.Value("user").(*utils.JWTClaim)
	if user == nil {
		return exceptions.NewUnAuthorizeError("UnAuthorized"), nil
	}

	file, err := r.Db.CreateFile(input.Name, string(input.URL), user.ID, *input.ParentUUID)
	if err != nil {
		return nil, err
	}

	return resources.NewFileResource(file), nil
}

// UserTopLevelFolders is the resolver for the userTopLevelFolders field.
func (r *queryResolver) UserTopLevelFolders(ctx context.Context, page *int, pageSize *int, orderByField *string, orderBy *model.Order) (model.UserTopLevelFolders, error) {
	claim := ctx.Value("user")
	if claim == nil {
		return exceptions.NewUnAuthorizeError("UnAuthorized"), nil
	}
	user := claim.(*utils.JWTClaim)
	limit, offset := utils.CalculatePaginationLimitAndOffset(*page, *pageSize)
	contents, count, err := r.Db.FindUsersTopLevelFolderItems(user.ID, limit, offset, orderByField, orderBy)
	if err != nil {
		return nil, err
	}
	return resources.PaginatedFolderItemResource(contents, count, *pageSize, *page+1, *orderByField, *orderBy), nil
}

// Folder returns generated.FolderResolver implementation.
func (r *Resolver) Folder() generated.FolderResolver { return &folderResolver{r} }

// FolderItem returns generated.FolderItemResolver implementation.
func (r *Resolver) FolderItem() generated.FolderItemResolver { return &folderItemResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type folderResolver struct{ *Resolver }
type folderItemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
