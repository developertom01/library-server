#import "./global.graphql"

type User {
  "user first name"
  firstName: String
  "user last name"
  lastName: String
  "user email"
  email: String!
  "Created timestamp"
  createdAt: String
  "Last updated timestamp"
  updatedAt: String
}

input SignUpInput {
  "user first name"
  firstName: String
  "user last name"
  lastName: String
  "user email"
  email: String!
  "user password"
  password: String!
}

input LoginInInput {
  "user email"
  email: String!
  "user password"
  password: String!
}

type LoginFailedErrorResponse implements Error {
  "Error message"
  message: String!
}

type EmailAlreadyExistsError implements Error {
  "Error message"
  message: String!
}

type LoginSuccessResponse {
  "Short lived jwt access token"
  accessToken: String!
  "long lived jwt refresh token"
  refreshToken: String!
}

union LoginResponse = LoginSuccessResponse | LoginFailedErrorResponse

union CurrentUserResponse = User | UnAuthorizedError

union SignUpUserResponse = User | EmailAlreadyExistsError

extend type Mutation {
  "Log user in with email and password"
  login(input: LoginInInput!): LoginResponse
  "Create user manually"
  signUp(input: SignUpInput): SignUpUserResponse
}

extend type Query {
  "Get current user info"
  currentUser: CurrentUserResponse
}
